[
  {
    "id": "b4938ba3-8b81-4d0c-b76e-fc1d5dbb6e09",
    "title": "Congratulations You're an Architect",
    "names": [
      "S. Kennedy"
    ],
    "twitters": [
      "devenable"
    ],
    "websites": [
      "http://www.devenable.com/"
    ],
    "abstract": "So you, or your workplace, identifies you as an architect, what now?\r\n\r\nThere are countless amounts of available material on software architecture and design patterns, but comparatively little on how to be a software architect.  Being an effective architect is a whole lot more than having a toolkit of patterns and practices!\r\n\r\nIn this talk Stephen will draw upon his years of experience working on architectural solutions and mentoring other architects.  Among other things, the talk will cover:\r\n\r\n- Attitudes and behaviours\r\n- Getting your way\r\n- Gaining the respect of the business\r\n- Considerations outside those of a developer\r\n\r\nThis talk is for practitioners from those early in their software architecture foray, to those just seeking some group therapy."
  },
  {
    "id": "b56e0923-c8be-427d-8b88-7a10acd8f9bb",
    "title": "Alexa, it's all just code and customers in the end",
    "names": [
      "G. Collins",
      "K. Hall"
    ],
    "twitters": [
      "gregcollins"
    ],
    "abstract": "Alexa is Amazon's virtual personal assistant, has been around for about two years and we have been extending it into the Australian Unity domain. It seems simple enough but when you start working with it changes the way you build UX, products and the way you think about your customers. It also comes with all the old software maturity practises that still need to solve i.e. CI/CD, Security, Debugging as well as Test  and Learn.\r\n\r\nWe'd like to take you through what we have found. What was easy, what wasn't and most importantly what we would have done differently."
  },
  {
    "id": "a1b6fff5-1a0b-49c0-a7af-f1daeaf650bc",
    "title": "DDD, CQRS, and ORMs - Finding the sweet spot",
    "names": [
      "A. Best"
    ],
    "twitters": [
      "_andrewb"
    ],
    "abstract": "DDD helps us tame the inherent complexity of non-trivial software development. CQRS supports the same goal goal, while providing other tangible benefits like optimisation and scalability. ORMs take the heavy lifting out of transalting between the worlds of Object Oriented software and relational persistance layers.\r\n\r\nFinding the sweet spot between these approaches can be a challenge. Some popular ORMs (cough Entity Framework cough) place burdensome constraints on DDD implementations, causing them to bend and contort in wierd and less-than-wonderful ways. They can also be sub-optimal for CQRS concerns. CQRS at times is viewed as introducing unwarranted overhead and complexity where it isn't needed.\r\n\r\nIn this session we will explore a less-than-wonderful domain model that utilises a single ORM for all of its concerns, and then look at how we can break it apart utilizing a CQRS approach that employs the best tool for the job for each concern, while keeping complexity to a minimum."
  },
  {
    "id": "40264cec-0a94-467a-ab2d-45ebe8f8994c",
    "title": "Gold Class Delivery",
    "names": [
      "A. Best"
    ],
    "twitters": [
      "_andrewb"
    ],
    "abstract": "Software development. Solution architecture. Test driven development. Domain driven design. Cloud. Static vs dynamic typing. Test coverage. Pull requests. Package management. Infrastructure automation. Identity management. Security.\r\n\r\nThe above represent the tip of the successful delivery iceberg.\r\n\r\nSoftware exists for people, and working with those people is the key to succesful delivery. Success in software delivery starts before the team's boots hit the ground, and continues to be measured beyond the final sprint review.\r\n\r\nIn this session we will take a look at some targeted, specific non-technical practices and behaviours you and your team can employ to vastly increase your chances of a successful software delivery."
  },
  {
    "id": "cd5b0a4a-4281-457e-8ecf-4e895c9cf819",
    "title": "Elm: The (Functional) Future of Web Applications",
    "names": [
      "H. Andersson"
    ],
    "twitters": [
      "hnrkndrssn"
    ],
    "abstract": "Not A Very Long Time Ago, In a Galaxy Not Very Far, Far Away.\r\n\r\nThere are a myriad of JavaScript frameworks that promises to solve the problems of frontend development in their own way, causing confusion amongst frontend developers.\r\n\r\nOut of the shadows appears a framework that takes a different approach to building reliable web applications, an approach that generates no runtime exceptions and friendly (not just at compile time) errors. A functional programming language called Elm.\r\n\r\n\r\nElm is a functional programming language, it builds on the same concepts of a virtual DOM and unidirectional dataflow that React and Redux use but uses a type inference system to find problems at compile time and provides friendly hints. Elm compiles down to JavaScript, which makes it easy to convert parts of your existing JavaScript web application to Elm and embedding it into your existing application.\r\n\r\nIn this session, we will explore how to build a web application using Elm. We'll start with the basics and move on to exploring the Elm architecture which is a simple pattern for architecting web applications. It allows us to create complex web applications that are easy to maintain and add new features to.\r\n\r\nThis talk requires no previous experience with functional programming languages, such as Haskell or F#, and is aimed at frontend developers that want to learn how to build reliable web applications with great performance and no runtime exceptions."
  },
  {
    "id": "5878c33c-a149-4304-a983-5411e2b736a3",
    "title": "Spec-Driven Development – API Mocking for Lean Development – MuleSoft API Manager, Azure API Management & Amazon API Gateway",
    "names": [
      "J. Yoo"
    ],
    "twitters": [
      "justinchronicle"
    ],
    "abstract": "As a front-end, full-stack and/or mobile app developer, using APIs is inevitable. However, what if those APIs are not yet implemented? Should I wait for back-end developers to complete API implementation? Nah, we don't need to wait for them as long as those API definitions are defined via RAML or Swagger. \r\n \r\nIn this session, Justin will talk about how beneficial API design-first approach will be, then how API spec is designed and mocked on MuleSoft API Manager, Azure API Management and Amazon API Gateway so that front-end, full-stack and/or mobile app developers can play around until the actual API implementations are done."
  },
  {
    "id": "7073ce46-818b-44b1-9519-8985ccacc3d9",
    "title": "Testing, Testing, Testing! Are Serverless Applications Testable? - Azure Functions & Logic Apps",
    "names": [
      "J. Yoo"
    ],
    "twitters": [
      "justinchronicle"
    ],
    "abstract": "Testing applications is more than important nowadays. Traditionally, developers perform unit tests and/or integration tests in variety of environments. Now, we see serverless applications. How can we test those applications? That's a tricky question. \r\n \r\nIn this session, Justin will demo how serverless applications, especially Azure Functions and Logic Apps, are written with considering testability. Then he will also show how those apps can be tested in a continuous integration pipeline, with various approach."
  },
  {
    "id": "8de116c9-2b0e-4c27-98ee-d411f5403db6",
    "title": "Culture as a Product",
    "names": [
      "M. Boudreau"
    ],
    "websites": [
      "http://codinghitchhiker.com"
    ],
    "abstract": "Forget SaaS, IaaS and PaaS - CaaP is where it’s at. People seem to ignore the importance of the culture and how it directly affects creativity, research, morale and the overall product. I’m here to prove to you, beautiful audience members, that a product is more than just the methodology, the technology or its utility; in the end, it's the culture that will define the product and differentiate it from the plethora of competitors.  Ignoring culture, and by extension your employees, could very well mean doom for your business."
  },
  {
    "id": "813415af-a6bc-453f-8581-a13b2cb489e9",
    "title": "Notes from the (Bleeding) Edge",
    "names": [
      "E. van der Koogh"
    ],
    "twitters": [
      "evanderkoogh"
    ],
    "websites": [
      "http://bitgenics.io"
    ],
    "abstract": "As the founder of a tech startup I get to make all the decisions about what technologies to use. And we have tried all[1] of them and even kept some of them.\r\nJoin me in a series of HonestTrailers for some of the hottest technologies out there. Amongst others: Server-Side Rendering, Lambda, New JavaScript Features, Honeycomb, All[2] of the new AWS products & Vue.js.\r\n\r\n[1] Of course not actually *all* of them. It would take an infinite amount of monkey and laptops to try *just* the new JavaScript Frameworks..\r\n[2] Maybe not all of these either. Amazon is only less prolific than open source JavaScript developers"
  },
  {
    "id": "88426429-c864-48e6-ac58-590ef2c2cefb",
    "title": "Azure Logic Apps and the Magic of Serverless Integration",
    "names": [
      "P. de la Cruz"
    ],
    "twitters": [
      "pacodelacruz"
    ],
    "websites": [
      "http://pacodelacruzag.wordpress.com/"
    ],
    "abstract": "Apps have transformed the way we work and do things; but they only truly work when they are connected. Traditionally, connecting applications required specialised skills and niche integration knowledge that not every developer wanted to learn. \r\n\r\nHowever, the increasing diversity of apps and the growing availability of APIs result in much greater integration demands. Luckily, now we have Azure Logic Apps, a rich, robust, fully-managed and very cool Integration Platform as a Service (iPaaS) that enable us to integrate, with speed and ease, not only the new and shiny apps, but also those legacy systems that were born before the API era.\r\n\r\nIn this presentation, Paco will share the magic of Logic Apps and show how to easily build “serverless” integration apps based on this Azure offering."
  },
  {
    "id": "0e871481-eb76-4fdf-b77f-7f515a76c45c",
    "title": "Graph Databases - what you need to know",
    "names": [
      "J. Gallagher"
    ],
    "twitters": [
      "joelgall"
    ],
    "abstract": "With the rise of Big Data & social networks, traditional Relational Databases have reached the limits of their abilities to handle inter-connected entities.\r\n\r\nAs a result, Graph databases have become more popular, with the likes of Microsoft and GitHub recently offering Graph solutions. \r\n\r\nThis talk will explain the theory behind Graph databases, when (and when not) to use them, and then demonstrate their power using Neo4j, one of the more popular graph databases."
  },
  {
    "id": "564b4a21-8d00-4123-812a-67c88dee0f8d",
    "title": "\"The hills are alive with the sound of your smelly code\"",
    "names": [
      "A. Marks"
    ],
    "twitters": [
      "andee_marks"
    ],
    "websites": [
      "http://vampwillow.wordpress.com"
    ],
    "abstract": "This is a demonstration of a code quality analysis tool that doesn’t visualise the metrics – it “audiolises” them.\r\n\r\nThe concepts of poor code having smell and colour (usually red) is commonly accepted, but what about appealing to our sense of hearing as well as eyes and nose?  Aeolian is an open source tool (written by the author) that generates MIDI music from code quality metrics, which begs the question:\r\n\r\nWhat does poor quality code sound like? Justin Beiber’s latest? A Phillip Glass soundtrack? A Phil Spector wall of sound cacophony? Modern Jazz? 🙂\r\n\r\nLikewise, what does good quality code sound like? Mozart? White noise?\r\n\r\nHow do commonly accepted musical concepts (keys, tempo, verse, chorus) apply when illustrating code quality.\r\n\r\nThe author (an amateur musician and long time producer of smelly code) will talk through the concepts of Aeolian and provide plenty of examples of how you can map code quality to music. \r\n\r\nThis will be a light-hearted talk and no knowledge of music theory is needed."
  },
  {
    "id": "4d89701f-261a-4fe3-96f9-367b7532b93e",
    "title": "Microservices Management using Consul",
    "names": [
      "H. Eskandari"
    ],
    "twitters": [
      "hadi_es"
    ],
    "websites": [
      "http://www.seesharpsoftware.com.au/"
    ],
    "abstract": "You have designed and deployed your application using Microservices patterns and deployed to production but it won't take too long to realize managing tens, hundred or even thousand instances of services manually can quickly become a nightmare. How do you make sure your services are healthy? You do you do load balancing? What about configuration management across your services? Does your service rely on another service? How do you do service discoveries locally, let alone acorss multi-data centers? \r\n\r\nCome to my talk and I'll show you how this can be done relatively easily using Consul."
  },
  {
    "id": "136443a9-4d1e-4e85-b3f9-5e8aa6017784",
    "title": "Microservices UI Patterns",
    "names": [
      "H. Eskandari"
    ],
    "twitters": [
      "hadi_es"
    ],
    "websites": [
      "http://www.seesharpsoftware.com.au/"
    ],
    "abstract": "There's a lot of buzz around using Microservices patterns to design your backend system, but surprisingly not a lot of people talk about how these services are ultimately tied back together on the frontend. This talk is about challenges you face when creating a UI for your Microservices and challenges you face to ensure service boundaries are respected while the code is still maintainable and loosely coupled."
  },
  {
    "id": "3e5be020-cc44-4a2e-82a0-d642bc1d9c83",
    "title": "Depression - software developer strain",
    "names": [
      "I. Gorelik"
    ],
    "twitters": [
      "rogik"
    ],
    "websites": [
      "http://igorelikblog.wordpress.com/"
    ],
    "abstract": "Everyone heard about depression. But most of us are sure that this won't happen to us. As we are strong and, as software developers, we are very logical. And depression is illogical. Right? It depends. Come to this session to hear some facts about depression, listen about my personal experience, and, the most important, what you can do about it."
  },
  {
    "id": "653fe001-3a88-4118-b11f-2f547448708c",
    "title": "How I stopped worrying and learned to love the JavaScript",
    "names": [
      "B. Forster"
    ],
    "twitters": [
      "shiftkey"
    ],
    "websites": [
      "http://brendanforster.com"
    ],
    "abstract": "About a year ago, I joined a team that was starting from scratch on a new project.\r\n\r\n\"And we're going to do it in JavaScript!\"\r\n\r\nIf you feel uncomfortable at hearing that detail, come along and hear about how we (a team of developers who weren't strong in JavaScript skills) shipped the project a year later and found it a (mostly) pleasant experience.\r\n\r\nI'll talk about how we settled on TypeScript, the tooling around TypeScript that helps keep everything under control, and show how you can put together a toolchain and process that balances moving quickly with producing correct code!"
  },
  {
    "id": "15f9d668-20ef-4df9-b44c-85caa2be228d",
    "title": "TypeScript + React",
    "names": [
      "B. Ali Syed"
    ],
    "twitters": [
      "basarat"
    ],
    "websites": [
      "http://basarat.com"
    ],
    "abstract": "TypeScript's recent claim to fame is its adaption by the Angular Team. That said perhaps you want to see what TypeScript + React looks like. \r\n\r\nThis session shows you benefits of this combo."
  },
  {
    "id": "cfdae985-e611-4cda-9119-79b8b63d29b5",
    "title": "How Blizzard turned a regular shit show into an amazing user experience",
    "names": [
      "V. Love"
    ],
    "twitters": [
      "fly401"
    ],
    "abstract": "You’ve burned your reputation, you’ve over promised, you’ve lost trust. This was the case for Blizzard Entertainment and their World of Warcraft subscribers. I know, I am one of them. Late August the Legion expansion was launched, and we all held our breath.\r\n\r\nI spent 3 days playing a game, and it was the best technology experience I have ever had. I will discuss the history of past releases, the user experience and how it was communicated to us. We will learn a bit about the technology and solutions behind the problems that had plagued them in the past. The promises given, the expectations and the results.\r\n\r\nWorking in IT I saw a lot of correlations in this experience to releasing software. Come to this session and learn how you can bring users around and the expected results when you do."
  }
]